import matplotlib.pyplot as plt
import pandas as pd

# Constants
SIGNIFICANT_COUNTRY_PERCENT = 0.01  # Can be any number between 0 and 1, change if you like
SIGNIFICANT_SHAPE_PERCENT = 0.03  # Can be any number between 0 and 1, change if you like


# Standard main function conventional name, will contain majority of running code
def main():
    # Read in CSV file into pandas dataframe
    url = "https://raw.githubusercontent.com/ILLogicalOperator/pythonprojects/main/scrubbed.csv"
    df = pd.read_csv(url)

    # First graph is pie graph of countries

    # Count sightings per country
    country_sightings = {}
    # Iterate through countries
    for country in df['country']:
        # Add a counter if not already in dictionary
        country_sightings.setdefault(country, 0)
        # Increment counter
        country_sightings[country] += 1
    # Convert to percentages and calculate other percentage
    new_dict = {'other': 0}
    for country in country_sightings:
        new = country_sightings[country] / len(df)
        # Check if it is significant and country is not NaN
        if not pd.isna(country) and new >= SIGNIFICANT_COUNTRY_PERCENT:
            # Keep as own country
            new_dict[country] = new
        else:
            # Move to other
            new_dict['other'] += new
    # Graph data, label, save, and clear
    plt.pie(new_dict.values(), labels=new_dict.keys())
    plt.title('UFO Sightings by Country')
    plt.savefig('country_pie_graph.png')
    plt.clf()

    # Narrow data down to just US
    df = df[df['country'] == 'us']

    # Top 5 states with most/least sightings, highest/lowest average duration

    # Repeat country filtering but for states
    state_sightings = {}
    state_durations = {}
    # Iterate through states with state name and duration at same time
    for state, duration in zip(df['state'], df['duration (seconds)']):
        # Add a counter if not already in dictionary
        state_sightings.setdefault(state, 0)
        state_durations.setdefault(state, 0)
        # Increment counter
        state_sightings[state] += 1
        # Remove all characters that are not digits, convert from str to int, add duration
        state_durations[state] += int(float(''.join(x for x in str(duration) if x.isdigit() or x == '.')))
    # Convert to percentages, if needed
    # new_dict = {}
    # for state in state_sightings:
    #     new = state_sightings[state] / len(df) * 100
    #     # Check if it is significant and country is not NaN
    #     new_dict[state] = new

    # Sort state names from least to mosr
    sorted_states = sorted(state_sightings, key=lambda x: state_sightings[x])
    sorted_values = [state_sightings[state] for state in sorted_states]

    # Plot bar graph, label, save, clear - limit to 5 values, reverse values for most to least
    plt.bar(list(reversed(sorted_states))[:5], list(reversed(sorted_values))[:5])
    plt.title('5 States with Most UFO Sightings')
    plt.xlabel('State')
    plt.ylabel('Sightings')
    plt.savefig('most_state_sightings.png')
    plt.clf()

    # Plot bar graph, label, save, clear - limit to 5 values
    plt.bar(sorted_states[:5], sorted_values[:5])
    plt.title('5 States with Least UFO Sightings')
    plt.xlabel('State')
    plt.ylabel('Sightings')
    plt.savefig('least_state_sightings.png')
    plt.clf()

    # Repeat sorting and graphing for average duration, average the durations using sighting count
    sorted_states = sorted(state_durations, key=lambda x: state_durations[x] / state_sightings[x])
    sorted_values = [state_durations[state] / state_sightings[state] for state in sorted_states]

    # Plot bar graph, label, save, clear - limit to 5 values, reverse values for most to least
    plt.bar(list(reversed(sorted_states))[:5], list(reversed(sorted_values))[:5])
    plt.title('5 States with Most UFO Average Duration')
    plt.xlabel('State')
    plt.ylabel('Time (seconds)')
    plt.savefig('state_highest_durations.png')
    plt.clf()

    # Plot bar graph, label, save, clear - limit to 5 values
    plt.bar(sorted_states[:5], sorted_values[:5])
    plt.title('5 States with Least UFO Average Duration')
    plt.xlabel('State')
    plt.ylabel('Time (seconds)')
    plt.savefig('state_lowest_durations.png')
    plt.clf()

    # Shape pie graph

    # Repeat country filtering for shapes
    shape_sightings = {}
    # Iterate through shapes
    for shape in df['shape']:
        # Add a counter if not already in dictionary
        shape_sightings.setdefault(shape, 0)
        # Increment counter
        shape_sightings[shape] += 1
    # Convert to percentages and calculate other percentage
    new_dict = {'other': 0}
    for shape in shape_sightings:
        new = shape_sightings[shape] / len(df)
        # Check if it is significant and country is not NaN
        if not pd.isna(shape) and new >= SIGNIFICANT_SHAPE_PERCENT:
            # Keep as own country
            new_dict[shape] = new
        else:
            # Move to other
            new_dict['other'] += new

    # Sort data to make graph more orderly from highest to lowest (reverse)
    sorted_shapes = sorted(new_dict, key=lambda x: new_dict[x], reverse=True)
    # Move other to end of list
    sorted_shapes.remove('other')
    sorted_shapes.append('other')
    # Sort values by sorted names
    sorted_values = [new_dict[x] for x in sorted_shapes]

    # Graph data, label, save, and clear
    plt.pie(sorted_values, labels=sorted_shapes)
    plt.title('UFO Sightings by Shape')
    plt.savefig('shape_pie_graph.png')
    plt.clf()

    # Repeat filtering for decades
    decade_sightings = {}
    # Iterate through shapes
    for date in df['datetime']:
        # Find year starting from 1 more than index of last slash (rindex or right index)
        year = date[date.rindex('/') + 1:]
        # Cut of time if any, convert to int
        if ' ' in year:
            year = int(year[:year.index(' ')])
        # Calculate decade, divide by 10, convert to int to take floor, multiply by 10 again
        decade = int(year / 10) * 10
        # Add a counter if not already in dictionary
        decade_sightings.setdefault(decade, 0)
        # Increment counter
        decade_sightings[decade] += 1

    # Sort by decade least to greatest decade
    sorted_decades = sorted(decade_sightings)
    sorted_values = [decade_sightings[x] for x in sorted_decades]

    # Graph data, label, add gridlines, save, and clear
    plt.plot(sorted_decades, sorted_values)
    plt.title('UFO Sightings by Decade')
    plt.xlabel('Decade')
    plt.ylabel('Sightings')
    plt.grid()
    plt.savefig('decade_line_graph.png')
    plt.clf()


# Standard python convention to call main function, if file is not being imported into another (so it is being called
# directly)
if __name__ == '__main__':
    # Call the main function
    main()
